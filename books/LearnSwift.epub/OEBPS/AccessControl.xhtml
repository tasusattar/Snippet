<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
  	<link href="epub.css" media="all" rel="stylesheet" type="text/css" />
  	<script type="text/javascript" src="svg.js"></script>
  </head>
  <body id="conceptual_flow_with_tasks">
    <div class="content-wrapper">
      <div id="chapter_container" class='conceptualwithtasks'>
  <article class="chapter">
    <a id="TP40014097-CH41">&#x200c;</a><a id="TP40014097-CH41-ID3">&#x200c;</a>
    <h2 class="chapter-name">Access Control</h2>
      
      	<section class="section">
      		<p class="para"><em>Access control</em> restricts access to parts of your code from code in other source files and modules. This feature enables you to hide the implementation details of your code, and to specify a preferred interface through which that code can be accessed and used.</p><p class="para">You can assign specific access levels to individual types (classes, structures, and enumerations), as well as to properties, methods, initializers, and subscripts belonging to those types. Protocols can be restricted to a certain context, as can global constants, variables, and functions.</p><p class="para">In addition to offering various levels of access control, Swift reduces the need to specify explicit access control levels by providing default access levels for typical scenarios. Indeed, if you are writing a single-target app, you may not need to specify explicit access control levels at all.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">The various aspects of your code that can have access control applied to them (properties, types, functions, and so on) are referred to as “entities” in the sections below, for brevity.
    	</p>
    
  </aside>
</div>

    		</section> 


      <section class="section">
	<a id="TP40014097-CH41-ID4">&#x200c;</a>
  <h3 class="section-name">Modules and Source Files</h3>
  <p class="para">Swift’s access control model is based on the concept of modules and source files.</p><p class="para">A <em>module</em> is a single unit of code distribution—a framework or application that is built and shipped as a single unit and that can be imported by another module with Swift’s <code class="code-voice">import</code> keyword.</p><p class="para">Each build target (such as an app bundle or framework) in Xcode is treated as a separate module in Swift. If you group together aspects of your app’s code as a stand-alone framework—perhaps to encapsulate and reuse that code across multiple applications—then everything you define within that framework will be part of a separate module when it is imported and used within an app, or when it is used within another framework.</p><p class="para">A <em>source file</em> is a single Swift source code file within a module (in effect, a single file within an app or framework). Although it is common to define individual types in separate source files, a single source file can contain definitions for multiple types, functions, and so on.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH41-ID5">&#x200c;</a>
  <h3 class="section-name">Access Levels</h3>
  <p class="para">Swift provides three different <em>access levels</em> for entities within your code. These access levels are relative to the source file in which an entity is defined, and also relative to the module that source file belongs to.</p><ul class="list-bullet">
  <li class="item"><p class="para"><em>Public access</em> enables entities to be used within any source file from their defining module, and also in a source file from another module that imports the defining module. You typically use public access when specifying the public interface to a framework.</p></li><li class="item"><p class="para"><em>Internal access</em> enables entities to be used within any source file from their defining module, but not in any source file outside of that module. You typically use internal access when defining an app’s or a framework’s internal structure.</p></li><li class="item"><p class="para"><em>Private access</em> restricts the use of an entity to its own defining source file. Use private access to hide the implementation details of a specific piece of functionality.</p></li>
</ul><p class="para">Public access is the highest (least restrictive) access level and private access is the lowest (or most restrictive) access level.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">Private access in Swift differs from private access in most other languages, as it’s scoped to the enclosing source file rather than to the enclosing declaration. This means that a type can access any private entities that are defined in the same source file as itself, but an extension cannot access that type’s private members if it’s defined in a separate source file.
    	</p>
    
  </aside>
</div>
  <section class="section">
	<a id="TP40014097-CH41-ID6">&#x200c;</a>
  <h3 class="section-name">Guiding Principle of Access Levels</h3>
  <p class="para">Access levels in Swift follow an overall guiding principle: <em>No entity can be defined in terms of another entity that has a lower (more restrictive) access level.</em></p><p class="para">For example:</p><ul class="list-bullet">
  <li class="item"><p class="para">A public variable cannot be defined as having an internal or private type, because the type might not be available everywhere that the public variable is used.</p></li><li class="item"><p class="para">A function cannot have a higher access level than its parameter types and return type, because the function could be used in situations where its constituent types are not available to the surrounding code.</p></li>
</ul><p class="para">The specific implications of this guiding principle for different aspects of the language are covered in detail below.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH41-ID7">&#x200c;</a>
  <h3 class="section-name">Default Access Levels</h3>
  <p class="para">All entities in your code (with a few specific exceptions, as described later in this chapter) have a default access level of internal if you do not specify an explicit access level yourself. As a result, in many cases you do not need to specify an explicit access level in your code.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH41-ID8">&#x200c;</a>
  <h3 class="section-name">Access Levels for Single-Target Apps</h3>
  <p class="para">When you write a simple single-target app, the code in your app is typically self-contained within the app and does not need to be made available outside of the app’s module. The default access level of internal already matches this requirement. Therefore, you do not need to specify a custom access level. You may, however, want to mark some parts of your code as private in order to hide their implementation details from other code within the app’s module.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH41-ID9">&#x200c;</a>
  <h3 class="section-name">Access Levels for Frameworks</h3>
  <p class="para">When you develop a framework, mark the public-facing interface to that framework as public so that it can be viewed and accessed by other modules, such as an app that imports the framework. This public-facing interface is the application programming interface (or API) for the framework.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">Any internal implementation details of your framework can still use the default access level of internal, or can be marked as private if you want to hide them from other parts of the framework’s internal code. You need to mark an entity as public only if you want it to become part of your framework’s API.
    	</p>
    
  </aside>
</div>
  
</section>
<section class="section">
	<a id="TP40014097-CH41-ID519">&#x200c;</a>
  <h3 class="section-name">Access Levels for Unit Test Targets</h3>
  <p class="para">When you write an app with a unit test target, the code in your app needs to be made available to that module in order to be tested. By default, only entities marked as public are accessible to other modules. However, a unit test target can access any internal entity, if you mark the import declaration for a product module with the <code class="code-voice">@testable</code> attribute and compile that product module with testing enabled.</p>
  
</section>

</section>
<section class="section">
	<a id="TP40014097-CH41-ID10">&#x200c;</a>
  <h3 class="section-name">Access Control Syntax</h3>
  <p class="para">Define the access level for an entity by placing one of the <code class="code-voice">public</code>, <code class="code-voice">internal</code>, or <code class="code-voice">private</code> modifiers before the entity’s introducer:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">public</code> <code class="kt">class</code> <code class="vc">SomePublicClass</code> {}</code></li>
            <li><code class="code-voice"><code class="kt">internal</code> <code class="kt">class</code> <code class="vc">SomeInternalClass</code> {}</code></li>
            <li><code class="code-voice"><code class="kt">private</code> <code class="kt">class</code> <code class="vc">SomePrivateClass</code> {}</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">public</code> <code class="kt">var</code> <code class="vc">somePublicVariable</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice"><code class="kt">internal</code> <code class="kt">let</code> <code class="vc">someInternalConstant</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice"><code class="kt">private</code> <code class="kt">func</code> <code class="vc">somePrivateFunction</code>() {}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Unless otherwise specified, the default access level is internal, as described in <a rel="me" data-id="//apple_ref/doc/uid/TP40014097-CH41-ID7" href="AccessControl.xhtml#TP40014097-CH41-ID7">Default Access Levels</a>. This means that <code class="code-voice">SomeInternalClass</code> and <code class="code-voice">someInternalConstant</code> can be written without an explicit access level modifier, and will still have an access level of internal:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">class</code> <code class="vc">SomeInternalClass</code> {}              <code class="c">// implicitly internal</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">someInternalConstant</code> = <code class="m">0</code>            <code class="c">// implicitly internal</code></code></li>
        </ol>
      </div>
  </div>
</section>
  
</section>
<section class="section">
	<a id="TP40014097-CH41-ID11">&#x200c;</a>
  <h3 class="section-name">Custom Types</h3>
  <p class="para">If you want to specify an explicit access level for a custom type, do so at the point that you define the type. The new type can then be used wherever its access level permits. For example, if you define a private class, that class can only be used as the type of a property, or as a function parameter or return type, in the source file in which the private class is defined.</p><p class="para">The access control level of a type also affects the default access level of that type’s <em>members</em> (its properties, methods, initializers, and subscripts). If you define a type’s access level as private, the default access level of its members will also be private. If you define a type’s access level as internal or public (or use the default access level of internal without specifying an access level explicitly), the default access level of the type’s members will be internal.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">As mentioned above, a public type defaults to having internal members, not public members. If you want a type member to be public, you must explicitly mark it as such. This requirement ensures that the public-facing API for a type is something you opt in to publishing, and avoids presenting the internal workings of a type as public API by mistake.
    	</p>
    
  </aside>
</div><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">public</code> <code class="kt">class</code> <code class="vc">SomePublicClass</code> {          <code class="c">// explicitly public class</code></code></li>
            <li><code class="code-voice">    <code class="kt">public</code> <code class="kt">var</code> <code class="vc">somePublicProperty</code> = <code class="m">0</code>    <code class="c">// explicitly public class member</code></code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">someInternalProperty</code> = <code class="m">0</code>         <code class="c">// implicitly internal class member</code></code></li>
            <li><code class="code-voice">    <code class="kt">private</code> <code class="kt">func</code> <code class="vc">somePrivateMethod</code>() {}  <code class="c">// explicitly private class member</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">class</code> <code class="vc">SomeInternalClass</code> {               <code class="c">// implicitly internal class</code></code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">someInternalProperty</code> = <code class="m">0</code>         <code class="c">// implicitly internal class member</code></code></li>
            <li><code class="code-voice">    <code class="kt">private</code> <code class="kt">func</code> <code class="vc">somePrivateMethod</code>() {}  <code class="c">// explicitly private class member</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">private</code> <code class="kt">class</code> <code class="vc">SomePrivateClass</code> {        <code class="c">// explicitly private class</code></code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">somePrivateProperty</code> = <code class="m">0</code>          <code class="c">// implicitly private class member</code></code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">somePrivateMethod</code>() {}          <code class="c">// implicitly private class member</code></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
  <section class="section">
	<a id="TP40014097-CH41-ID12">&#x200c;</a>
  <h3 class="section-name">Tuple Types</h3>
  <p class="para">The access level for a tuple type is the most restrictive access level of all types used in that tuple. For example, if you compose a tuple from two different types, one with internal access and one with private access, the access level for that compound tuple type will be private.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">Tuple types do not have a standalone definition in the way that classes, structures, enumerations, and functions do. A tuple type’s access level is deduced automatically when the tuple type is used, and cannot be specified explicitly.
    	</p>
    
  </aside>
</div>
  
</section>
<section class="section">
	<a id="TP40014097-CH41-ID13">&#x200c;</a>
  <h3 class="section-name">Function Types</h3>
  <p class="para">The access level for a function type is calculated as the most restrictive access level of the function’s parameter types and return type. You must specify the access level explicitly as part of the function’s definition if the function’s calculated access level does not match the contextual default.</p><p class="para">The example below defines a global function called <code class="code-voice">someFunction</code>, without providing a specific access level modifier for the function itself. You might expect this function to have the default access level of “internal”, but this is not the case. In fact, <code class="code-voice">someFunction</code> will not compile as written below:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">someFunction</code>() -&gt; (<code class="n"><!-- a href="" logicalPath="" -->SomeInternalClass<!-- /a --></code>, <code class="n"><!-- a href="" logicalPath="" -->SomePrivateClass<!-- /a --></code>) {</code></li>
            <li><code class="code-voice">    <code class="c">// function implementation goes here</code></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">The function’s return type is a tuple type composed from two of the custom classes defined above in <a rel="me" data-id="//apple_ref/doc/uid/TP40014097-CH41-ID11" href="AccessControl.xhtml#TP40014097-CH41-ID11">Custom Types</a>. One of these classes was defined as “internal”, and the other was defined as “private”. Therefore, the overall access level of the compound tuple type is “private” (the minimum access level of the tuple’s constituent types).</p><p class="para">Because the function’s return type is private, you must mark the function’s overall access level with the <code class="code-voice">private</code> modifier for the function declaration to be valid:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">private</code> <code class="kt">func</code> <code class="vc">someFunction</code>() -&gt; (<code class="n"><!-- a href="" logicalPath="" -->SomeInternalClass<!-- /a --></code>, <code class="n"><!-- a href="" logicalPath="" -->SomePrivateClass<!-- /a --></code>) {</code></li>
            <li><code class="code-voice">    <code class="c">// function implementation goes here</code></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">It is not valid to mark the definition of <code class="code-voice">someFunction</code> with the <code class="code-voice">public</code> or <code class="code-voice">internal</code> modifiers, or to use the default setting of internal, because public or internal users of the function might not have appropriate access to the private class used in the function’s return type.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH41-ID14">&#x200c;</a>
  <h3 class="section-name">Enumeration Types</h3>
  <p class="para">The individual cases of an enumeration automatically receive the same access level as the enumeration they belong to. You cannot specify a different access level for individual enumeration cases.</p><p class="para">In the example below, the <code class="code-voice">CompassPoint</code> enumeration has an explicit access level of “public”. The enumeration cases <code class="code-voice">North</code>, <code class="code-voice">South</code>, <code class="code-voice">East</code>, and <code class="code-voice">West</code> therefore also have an access level of “public”:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">public</code> <code class="kt">enum</code> <code class="vc">CompassPoint</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">North</code></code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">South</code></code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">East</code></code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">West</code></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
  <section class="section">
	<a id="TP40014097-CH41-ID468">&#x200c;</a>
  <h3 class="section-name">Raw Values and Associated Values</h3>
  <p class="para">The types used for any raw values or associated values in an enumeration definition must have an access level at least as high as the enumeration’s access level. You cannot use a <code class="code-voice">private</code> type as the raw-value type of an enumeration with an <code class="code-voice">internal</code> access level, for example.</p>
  
</section>

</section>
<section class="section">
	<a id="TP40014097-CH41-ID15">&#x200c;</a>
  <h3 class="section-name">Nested Types</h3>
  <p class="para">Nested types defined within a private type have an automatic access level of private. Nested types defined within a public type or an internal type have an automatic access level of internal. If you want a nested type within a public type to be publicly available, you must explicitly declare the nested type as public.</p>
  
</section>

</section>
<section class="section">
	<a id="TP40014097-CH41-ID16">&#x200c;</a>
  <h3 class="section-name">Subclassing</h3>
  <p class="para">You can subclass any class that can be accessed in the current access context. A subclass cannot have a higher access level than its superclass—for example, you cannot write a public subclass of an internal superclass.</p><p class="para">In addition, you can override any class member (method, property, initializer, or subscript) that is visible in a certain access context.</p><p class="para">An override can make an inherited class member more accessible than its superclass version. In the example below, class <code class="code-voice">A</code> is a public class with a private method called <code class="code-voice">someMethod()</code>. Class <code class="code-voice">B</code> is a subclass of <code class="code-voice">A</code>, with a reduced access level of “internal”. Nonetheless, class <code class="code-voice">B</code> provides an override of <code class="code-voice">someMethod()</code> with an access level of “internal”, which is <em>higher</em> than the original implementation of <code class="code-voice">someMethod()</code>:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">public</code> <code class="kt">class</code> <code class="vc">A</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">private</code> <code class="kt">func</code> <code class="vc">someMethod</code>() {}</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">internal</code> <code class="kt">class</code> <code class="vc">B</code>: <code class="n"><!-- a href="" logicalPath="" -->A<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">override</code> <code class="kt">internal</code> <code class="kt">func</code> <code class="vc">someMethod</code>() {}</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">It is even valid for a subclass member to call a superclass member that has lower access permissions than the subclass member, as long as the call to the superclass’s member takes place within an allowed access level context (that is, within the same source file as the superclass for a private member call, or within the same module as the superclass for an internal member call):</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">public</code> <code class="kt">class</code> <code class="vc">A</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">private</code> <code class="kt">func</code> <code class="vc">someMethod</code>() {}</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">internal</code> <code class="kt">class</code> <code class="vc">B</code>: <code class="n"><!-- a href="" logicalPath="" -->A<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">override</code> <code class="kt">internal</code> <code class="kt">func</code> <code class="vc">someMethod</code>() {</code></li>
            <li><code class="code-voice">        <code class="kt">super</code>.<code class="vc">someMethod</code>()</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Because superclass <code class="code-voice">A</code> and subclass <code class="code-voice">B</code> are defined in the same source file, it is valid for the <code class="code-voice">B</code> implementation of <code class="code-voice">someMethod()</code> to call <code class="code-voice">super.someMethod()</code>.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH41-ID17">&#x200c;</a>
  <h3 class="section-name">Constants, Variables, Properties, and Subscripts</h3>
  <p class="para">A constant, variable, or property cannot be more public than its type. It is not valid to write a public property with a private type, for example. Similarly, a subscript cannot be more public than either its index type or return type.</p><p class="para">If a constant, variable, property, or subscript makes use of a private type, the constant, variable, property, or subscript must also be marked as <code class="code-voice">private</code>:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">private</code> <code class="kt">var</code> <code class="vc">privateInstance</code> = <code class="vc">SomePrivateClass</code>()</code></li>
        </ol>
      </div>
  </div>
</section>
  <section class="section">
	<a id="TP40014097-CH41-ID18">&#x200c;</a>
  <h3 class="section-name">Getters and Setters</h3>
  <p class="para">Getters and setters for constants, variables, properties, and subscripts automatically receive the same access level as the constant, variable, property, or subscript they belong to.</p><p class="para">You can give a setter a <em>lower</em> access level than its corresponding getter, to restrict the read-write scope of that variable, property, or subscript. You assign a lower access level by writing <code class="code-voice">private(set)</code> or <code class="code-voice">internal(set)</code> before the <code class="code-voice">var</code> or <code class="code-voice">subscript</code> introducer.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">This rule applies to stored properties as well as computed properties. Even though you do not write an explicit getter and setter for a stored property, Swift still synthesizes an implicit getter and setter for you to provide access to the stored property’s backing storage. Use <code class="code-voice">private(set)</code> and <code class="code-voice">internal(set)</code> to change the access level of this synthesized setter in exactly the same way as for an explicit setter in a computed property.
    	</p>
    
  </aside>
</div><p class="para">The example below defines a structure called <code class="code-voice">TrackedString</code>, which keeps track of the number of times a string property is modified:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">struct</code> <code class="vc">TrackedString</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">private(set)</code> <code class="kt">var</code> <code class="vc">numberOfEdits</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">value</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> = <code class="s">&quot;&quot;</code> {</code></li>
            <li><code class="code-voice">        <code class="kt">didSet</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">numberOfEdits</code>++</code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">The <code class="code-voice">TrackedString</code> structure defines a stored string property called <code class="code-voice">value</code>, with an initial value of <code class="code-voice">&quot;&quot;</code> (an empty string). The structure also defines a stored integer property called <code class="code-voice">numberOfEdits</code>, which is used to track the number of times that <code class="code-voice">value</code> is modified. This modification tracking is implemented with a <code class="code-voice">didSet</code> property observer on the <code class="code-voice">value</code> property, which increments <code class="code-voice">numberOfEdits</code> every time the <code class="code-voice">value</code> property is set to a new value.</p><p class="para">The <code class="code-voice">TrackedString</code> structure and the <code class="code-voice">value</code> property do not provide an explicit access level modifier, and so they both receive the default access level of internal. However, the access level for the <code class="code-voice">numberOfEdits</code> property is marked with a <code class="code-voice">private(set)</code> modifier to indicate that the property should be settable only from within the same source file as the <code class="code-voice">TrackedString</code> structure’s definition. The property’s getter still has the default access level of internal, but its setter is now private to the source file in which <code class="code-voice">TrackedString</code> is defined. This enables <code class="code-voice">TrackedString</code> to modify the <code class="code-voice">numberOfEdits</code> property internally, but to present the property as a read-only property when it is used by other source files within the same module.</p><p class="para">If you create a <code class="code-voice">TrackedString</code> instance and modify its string value a few times, you can see the <code class="code-voice">numberOfEdits</code> property value update to match the number of modifications:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">stringToEdit</code> = <code class="vc">TrackedString</code>()</code></li>
            <li><code class="code-voice"><code class="vc">stringToEdit</code>.<code class="vc">value</code> = <code class="s">&quot;This string will be tracked.&quot;</code></code></li>
            <li><code class="code-voice"><code class="vc">stringToEdit</code>.<code class="vc">value</code> += <code class="s">&quot; This edit will increment numberOfEdits.&quot;</code></code></li>
            <li><code class="code-voice"><code class="vc">stringToEdit</code>.<code class="vc">value</code> += <code class="s">&quot; So will this one.&quot;</code></code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="s">&quot;The number of edits is </code>\(<code class="vc">stringToEdit</code>.<code class="vc">numberOfEdits</code>)<code class="s">&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="c">// prints &quot;The number of edits is 3&quot;</code></code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Although you can query the current value of the <code class="code-voice">numberOfEdits</code> property from within another source file, you cannot <em>modify</em> the property from another source file. This restriction protects the implementation details of the <code class="code-voice">TrackedString</code> edit-tracking functionality, while still providing convenient access to an aspect of that functionality.</p><p class="para">Note that you can assign an explicit access level for both a getter and a setter if required. The example below shows a version of the <code class="code-voice">TrackedString</code> structure in which the structure is defined with an explicit access level of public. The structure’s members (including the <code class="code-voice">numberOfEdits</code> property) therefore have an internal access level by default. You can make the structure’s <code class="code-voice">numberOfEdits</code> property getter public, and its property setter private, by combining the <code class="code-voice">public</code> and <code class="code-voice">private(set)</code> access level modifiers:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">public</code> <code class="kt">struct</code> <code class="vc">TrackedString</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">public</code> <code class="kt">private(set)</code> <code class="kt">var</code> <code class="vc">numberOfEdits</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice">    <code class="kt">public</code> <code class="kt">var</code> <code class="vc">value</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> = <code class="s">&quot;&quot;</code> {</code></li>
            <li><code class="code-voice">        <code class="kt">didSet</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">numberOfEdits</code>++</code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">public</code> <code class="kt">init</code>() {}</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
  
</section>

</section>
<section class="section">
	<a id="TP40014097-CH41-ID19">&#x200c;</a>
  <h3 class="section-name">Initializers</h3>
  <p class="para">Custom initializers can be assigned an access level less than or equal to the type that they initialize. The only exception is for required initializers (as defined in <a rel="me" data-id="//apple_ref/doc/uid/TP40014097-CH18-ID231" href="Initialization.xhtml#TP40014097-CH18-ID231">Required Initializers</a>). A required initializer must have the same access level as the class it belongs to.</p><p class="para">As with function and method parameters, the types of an initializer’s parameters cannot be more private than the initializer’s own access level.</p>
  <section class="section">
	<a id="TP40014097-CH41-ID20">&#x200c;</a>
  <h3 class="section-name">Default Initializers</h3>
  <p class="para">As described in <a rel="me" data-id="//apple_ref/doc/uid/TP40014097-CH18-ID213" href="Initialization.xhtml#TP40014097-CH18-ID213">Default Initializers</a>, Swift automatically provides a <em>default initializer</em> without any arguments for any structure or base class that provides default values for all of its properties and does not provide at least one initializer itself.</p><p class="para">A default initializer has the same access level as the type it initializes, unless that type is defined as <code class="code-voice">public</code>. For a type that is defined as <code class="code-voice">public</code>, the default initializer is considered internal. If you want a public type to be initializable with a no-argument initializer when used in another module, you must explicitly provide a public no-argument initializer yourself as part of the type’s definition.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH41-ID21">&#x200c;</a>
  <h3 class="section-name">Default Memberwise Initializers for Structure Types</h3>
  <p class="para">The default memberwise initializer for a structure type is considered private if any of the structure’s stored properties are private. Otherwise, the initializer has an access level of internal.</p><p class="para">As with the default initializer above, if you want a public structure type to be initializable with a memberwise initializer when used in another module, you must provide a public memberwise initializer yourself as part of the type’s definition.</p>
  
</section>

</section>
<section class="section">
	<a id="TP40014097-CH41-ID22">&#x200c;</a>
  <h3 class="section-name">Protocols</h3>
  <p class="para">If you want to assign an explicit access level to a protocol type, do so at the point that you define the protocol. This enables you to create protocols that can only be adopted within a certain access context.</p><p class="para">The access level of each requirement within a protocol definition is automatically set to the same access level as the protocol. You cannot set a protocol requirement to a different access level than the protocol it supports. This ensures that all of the protocol’s requirements will be visible on any type that adopts the protocol.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">If you define a public protocol, the protocol’s requirements require a public access level for those requirements when they are implemented. This behavior is different from other types, where a public type definition implies an access level of internal for the type’s members.
    	</p>
    
  </aside>
</div>
  <section class="section">
	<a id="TP40014097-CH41-ID23">&#x200c;</a>
  <h3 class="section-name">Protocol Inheritance</h3>
  <p class="para">If you define a new protocol that inherits from an existing protocol, the new protocol can have at most the same access level as the protocol it inherits from. You cannot write a public protocol that inherits from an internal protocol, for example.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH41-ID24">&#x200c;</a>
  <h3 class="section-name">Protocol Conformance</h3>
  <p class="para">A type can conform to a protocol with a lower access level than the type itself. For example, you can define a public type that can be used in other modules, but whose conformance to an internal protocol can only be used within the internal protocol’s defining module.</p><p class="para">The context in which a type conforms to a particular protocol is the minimum of the type’s access level and the protocol’s access level. If a type is public, but a protocol it conforms to is internal, the type’s conformance to that protocol is also internal.</p><p class="para">When you write or extend a type to conform to a protocol, you must ensure that the type’s implementation of each protocol requirement has at least the same access level as the type’s conformance to that protocol. For example, if a public type conforms to an internal protocol, the type’s implementation of each protocol requirement must be at least “internal”.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">In Swift, as in Objective-C, protocol conformance is global—it is not possible for a type to conform to a protocol in two different ways within the same program.
    	</p>
    
  </aside>
</div>
  
</section>

</section>
<section class="section">
	<a id="TP40014097-CH41-ID25">&#x200c;</a>
  <h3 class="section-name">Extensions</h3>
  <p class="para">You can extend a class, structure, or enumeration in any access context in which the class, structure, or enumeration is available. Any type members added in an extension have the same default access level as type members declared in the original type being extended. If you extend a public or internal type, any new type members you add will have a default access level of internal. If you extend a private type, any new type members you add will have a default access level of private.</p><p class="para">Alternatively, you can mark an extension with an explicit access level modifier (for example, <code class="code-voice">private extension</code>) to set a new default access level for all members defined within the extension. This new default can still be overridden within the extension for individual type members.</p>
  <section class="section">
	<a id="TP40014097-CH41-NoLink_31">&#x200c;</a>
  <h3 class="section-name">Adding Protocol Conformance with an Extension</h3>
  <p class="para">You cannot provide an explicit access level modifier for an extension if you are using that extension to add protocol conformance. Instead, the protocol’s own access level is used to provide the default access level for each protocol requirement implementation within the extension.</p>
  
</section>

</section>
<section class="section">
	<a id="TP40014097-CH41-ID26">&#x200c;</a>
  <h3 class="section-name">Generics</h3>
  <p class="para">The access level for a generic type or generic function is the minimum of the access level of the generic type or function itself and the access level of any type constraints on its type parameters.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH41-ID27">&#x200c;</a>
  <h3 class="section-name">Type Aliases</h3>
  <p class="para">Any type aliases you define are treated as distinct types for the purposes of access control. A type alias can have an access level less than or equal to the access level of the type it aliases. For example, a private type alias can alias a private, internal, or public type, but a public type alias cannot alias an internal or private type.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">This rule also applies to type aliases for associated types used to satisfy protocol conformances.
    	</p>
    
  </aside>
</div>
  
</section>

  </article>
</div>

    </div>
  </body>
</html>
